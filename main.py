from app import app
import logging
import atexit
from flask import g, jsonify
import os
import asyncio

# Set up logging
logging.basicConfig(level=logging.DEBUG)

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
from tasks import background_tasks
from modules.telegram_notifier import TelegramNotifier

# –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –±—ã–ª–∏ –ª–∏ –∑–∞–ø—É—â–µ–Ω—ã —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
background_tasks_started = False

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from models import SystemSetting

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
with app.app_context():
    if TelegramNotifier.is_configured():
        app.logger.info("Telegram notifications are configured and ready to use")
        telegram_token = SystemSetting.get_value('telegram_bot_token')
        app.logger.info(f"Telegram bot token: {'*' * 10}{telegram_token[-5:] if telegram_token else 'Not set'}")
        app.logger.info(f"Telegram chat ID: {SystemSetting.get_value('telegram_chat_id')}")
    else:
        app.logger.warning("Telegram notifications are not configured! Add settings in the System Settings panel.")

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram
@app.route('/debug/telegram-test')
def test_telegram_debug():
    """–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    # –≠—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flask,
    # –ø–æ—ç—Ç–æ–º—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å app_context –Ω–µ –Ω—É–∂–Ω–æ
    
    if not TelegramNotifier.is_configured():
        try:
            telegram_token = SystemSetting.get_value('telegram_bot_token')
            telegram_chat_id = SystemSetting.get_value('telegram_chat_id')
            return jsonify({
                'status': 'error',
                'message': 'Telegram notifications are not configured',
                'token_exists': bool(telegram_token),
                'chat_id_exists': bool(telegram_chat_id),
            })
        except Exception as e:
            app.logger.error(f"Error accessing Telegram settings: {str(e)}")
            return jsonify({
                'status': 'error',
                'message': f'Error accessing settings: {str(e)}',
                'token_exists': False,
                'chat_id_exists': False,
            })
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_message = f"""
üîç <b>–û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>

–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Telegram.
–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {asyncio.run(TelegramNotifier.get_current_time())}

<i>–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!</i>
"""
        # –°–æ–∑–¥–∞–µ–º event loop –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = asyncio.run(TelegramNotifier.send_message(test_message))
        
        try:
            telegram_token = SystemSetting.get_value('telegram_bot_token')
            telegram_chat_id = SystemSetting.get_value('telegram_chat_id')
            
            return jsonify({
                'status': 'success' if result else 'error',
                'message': 'Test message sent successfully' if result else 'Failed to send message',
                'token_prefix': telegram_token[:5] + '...' if telegram_token else 'Not set',
                'chat_id': telegram_chat_id if telegram_chat_id else 'Not set',
            })
        except Exception as e:
            app.logger.error(f"Error accessing Telegram settings for response: {str(e)}")
            return jsonify({
                'status': 'success' if result else 'error',
                'message': 'Test message sent successfully' if result else 'Failed to send message',
                'token_error': str(e),
            })
    
    except Exception as e:
        app.logger.error(f"Error sending test Telegram message: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': f'Exception occurred: {str(e)}',
            'error_type': str(type(e).__name__),
        })

# –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
@app.before_request
def start_background_tasks_if_needed():
    global background_tasks_started
    if not background_tasks_started:
        background_tasks.start()
        background_tasks_started = True
        app.logger.info("Background tasks started on first request")
        
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
        try:
            if TelegramNotifier.is_configured():
                app.logger.info("Telegram notifications are enabled for system events")
        except Exception as e:
            app.logger.error(f"Error checking Telegram configuration: {str(e)}")

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
atexit.register(background_tasks.stop)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
